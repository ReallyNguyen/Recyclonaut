import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/quiz/Quiz.module.css'
import { useRouter } from 'next/router'
import quizdata from '@/data/quiz.json'
import buttondata from '@/data/otherbutton.json'
import ProgressBar from '@/components/ProgressBar'
import { useState, useEffect } from 'react'
import Buttons from '@/components/Buttons/QuizButton'
import OtherButton from '@/components/Buttons/OtherButton'
import NavBar from '@/components/NavBar'


export default function Quiz() {
    const [questionIndex, setQuestionIndex] = useState(1);
    const [question, setQuestion] = useState([...quizdata]);
    const [button, setButton] = useState([...buttondata]);
    const [score, setScore] = useState(0);
    const [nextClicked, setNextClicked] = useState(false);
    const [selectedOptions, setSelectedOptions] = useState({});
    const [quizCompleted, setQuizCompleted] = useState(false);
    const [results, setResults] = useState([]);


    const updateScore = (questionID, optionIndex, points) => {
        const currentOptionIndex = selectedOptions[questionID];
        if (currentOptionIndex !== undefined && currentOptionIndex === optionIndex) {
            return;
        }
        const selectedOptionPoints = question.find(q => q.questionID === questionID).options[optionIndex].point;
        const currentOptionPoints = currentOptionIndex !== undefined ? question.find(q => q.questionID === questionID).options[currentOptionIndex].point : 0;
        setScore(score - currentOptionPoints + selectedOptionPoints);
        setSelectedOptions({
            ...selectedOptions,
            [questionID]: optionIndex
        });

        const selectedQuestion = question.find(q => q.questionID === questionID); // Find the question object based on questionID
        const selectedOption = selectedQuestion.options[optionIndex].option; // Get the selected option based on optionIndex
        const questionText = selectedQuestion.question; // Get the question text from the selected question object

        // Update results with the selected question and option
        setResults([...results, { question: questionText, selectedOption }]);

    };


    useEffect(() => {
        setQuestion([...quizdata].slice(questionIndex - 1, questionIndex));
    }, [questionIndex]);

    const handleNextQuestion = () => {
        const activeButton = document.querySelector(`.${styles.buttons} button.${styles.active}`);
        console.log(questionIndex)
        if (activeButton) {
            activeButton.classList.remove(styles.active);
        }
        if (questionIndex === 4) {
            setQuizCompleted(true);
        }
        setQuestionIndex(questionIndex + 1);
    };

    if (quizCompleted && score === 6) {
        return (
            <div>
                <h1>Results</h1>
                <p>Score: {score}</p>
                <p>Hi</p>
                {results.map((result, index) => (
                    <div key={index}>
                        <h3>Question: {result.question}</h3>
                        <p>Selected Option: {result.selectedOption}</p>
                        <p>{result.result}</p>
                    </div>
                ))}
            </div>
        );
    } else if (quizCompleted && score === 4) {
        return (
            <div>
                <h1>Results</h1>
                <p>Score: {score}</p>
                <p>boo</p>
                {results.map((result, index) => (
                    <div key={index}>
                        <h3>Question: {result.question}</h3>
                        <p>Selected Option: {result.selectedOption}</p>
                    </div>
                ))}
            </div>
        );
    }



    const handleBackQuestion = () => {
        setQuestionIndex(questionIndex - 1);
        const buttons = document.querySelectorAll(`.${styles.buttons} button`);
        buttons.forEach((button) => {
            button.classList.remove(styles.active);
        });
        if (questionIndex === 1) {
            setNextClicked(true);
        }
    };

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className={styles.header}>
                    <NavBar />
                </div>
                <ProgressBar questionIndex={questionIndex} totalQuestions={quizdata.length} />
                <div>
                    <div className={styles.quiz_container}>
                        {question && question.map((info, index) => (
                            <div key={index}>
                                <h3>{info.question}</h3>
                                {info.options.map((option, optionIndex) => (
                                    <Buttons
                                        key={`${questionIndex}-${optionIndex}`}
                                        option={option}
                                        buttons={info.questionID === "One" || info.questionID === "Two" ? "3" : "2"}
                                        selected={selectedOptions[info.questionID] === optionIndex}
                                        updateScore={(points) => updateScore(info.questionID, optionIndex, points)}
                                        disableButtons={nextClicked}
                                    />
                                ))}
                            </div>
                        ))}
                    </div>
                    <p>Score: {score}</p>

                    <p>Score: {score}</p>
                </div>
                <div className={styles.back_and_next}>
                    {button.map((info, index) => {
                        if (info.buttons.toLowerCase() === 'quiz') {
                            return (
                                <OtherButton
                                    key={index}
                                    back={info.back}
                                    next={info.next}
                                    type="quiz"
                                    onNext={handleNextQuestion}
                                    onBack={handleBackQuestion}
                                />
                            );
                        }
                    })}
                </div>
            </main>
        </>
    );
}
